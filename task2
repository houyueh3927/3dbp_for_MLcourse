import random
from typing import List, Tuple

class Item:
    def __init__(self, width: float, height: float, depth: float, id: int):
        self.width = width
        self.height = height
        self.depth = depth
        self.id = id
        self.rotation_axis = None  # 旋转轴（'x', 'y', 'z'）
        self.rotation_angle = 0  # 旋转角度（0, 90）
        self.position = None  # 物品位置

    def rotate(self):
        """简化后的旋转物品（只支持四种旋转情况）"""
        axis = random.choice(['x', 'y', 'z'])
        angle = random.choice([0, 90])  # 旋转角度：0或90

        if angle == 0:
            self.rotation_axis = axis
            self.rotation_angle = angle
            return

        if axis == 'x' and angle == 90:
            self.height, self.depth = self.depth, self.height
        elif axis == 'y' and angle == 90:
            self.width, self.depth = self.depth, self.width
        elif axis == 'z' and angle == 90:
            self.width, self.height = self.height, self.width

        self.rotation_axis = axis
        self.rotation_angle = angle

    def get_rotated_dimensions(self):
        return self.width, self.height, self.depth

    def __repr__(self):
        return f"Item {self.id}: {self.width:.1f}x{self.height:.1f}x{self.depth:.1f} (Rotation: {self.rotation_angle}° around {self.rotation_axis}-axis)"


class Bin:
    def __init__(self, width: float, height: float, depth: float):
        self.width = width
        self.height = height
        self.depth = depth
        self.items: List[Item] = []
        self.spaces = [(0, 0, 0, width, height, depth)]  # 存储剩余空间


class NeuralGuidedBinPacking:
    def __init__(self, bin_dimensions: Tuple[float, float, float], 
                 items: List[Item], 
                 strategy_network: callable,
                 max_depth: int = 100):
        self.bin_dimensions = bin_dimensions
        self.items = items
        self.strategy_network = strategy_network  # 策略网络函数
        self.max_depth = max_depth  # 最大搜索深度

    def fits(self, item: Item, space: Tuple[float, float, float, float, float, float]) -> bool:
        x, y, z, w, h, d = space
        return (item.width <= w and item.height <= h and item.depth <= d)

    def find_position(self, item: Item, bin: Bin) -> bool:
        """根据物品和剩余空间找到合适的位置"""
        for i, space in enumerate(bin.spaces):
            for _ in range(6):  # 尝试旋转
                if self.fits(item, space):
                    x, y, z, w, h, d = space
                    item.position = (x, y, z)

                    # 更新剩余空间
                    bin.spaces.pop(i)
                    
                    # 分割剩余空间
                    if w - item.width > 0:
                        bin.spaces.append((x + item.width, y, z, w - item.width, h, d))
                    if h - item.height > 0:
                        bin.spaces.append((x, y + item.height, z, item.width, h - item.height, d))
                    if d - item.depth > 0:
                        bin.spaces.append((x, y, z + item.depth, item.width, item.height, d - item.depth))

                    bin.items.append(item)
                    return True
                else:
                    item.rotate()  # 尝试旋转
        return False

    def search(self, bin: Bin, remaining_items: List[Item], depth: int = 0):
        """基于树搜索策略引导进行深度优先搜索"""
        if depth > self.max_depth:
            return bin.items  # 超过最大深度则返回当前的解决方案

        if not remaining_items:  # 如果没有剩余物品，返回当前解
            return bin.items

        # 获取策略网络的评分来决定哪个物品最优
        best_item = None
        best_fitness = float('-inf')
        best_position = None

        for item in remaining_items:
            # 调用策略网络来评估每个物品的放置优先级
            score = self.strategy_network(item, bin)  # 策略网络预测
            if score > best_fitness:
                best_fitness = score
                best_item = item

        # 尝试将最优物品放置到容器中
        if best_item:
            # 找到合适的位置并放置物品
            if self.find_position(best_item, bin):
                new_remaining_items = remaining_items.copy()
                new_remaining_items.remove(best_item)
                
                # 继续递归搜索
                solution = self.search(bin, new_remaining_items, depth + 1)
                if len(solution) > len(bin.items):  # 评估当前解是否更好
                    return solution
        
        return bin.items  # 返回当前解

    def solve(self) -> Tuple[List[int], float]:
        # 创建一个空的容器
        bin = Bin(*self.bin_dimensions)
        remaining_items = self.items.copy()

        # 从策略网络引导搜索
        best_solution = self.search(bin, remaining_items)

        # 过滤掉无效的索引
        valid_solution = [item.id for item in best_solution if 0 <= item.id < len(self.items)]
        
        # 计算fitness
        packed_volume = sum([item.get_rotated_dimensions()[0] * item.get_rotated_dimensions()[1] * item.get_rotated_dimensions()[2] for item in best_solution])
        bin_volume = self.bin_dimensions[0] * self.bin_dimensions[1] * self.bin_dimensions[2]
        fitness = len(valid_solution) + packed_volume / bin_volume
        return valid_solution, fitness

# 示例的策略网络函数：一个简单的示例，实际使用时应替换为训练好的神经网络模型
def simple_strategy_network(item: Item, bin: Bin) -> float:
    # 这里我们使用一个简单的规则：优先考虑体积最小的物品，简单示例
    return -(item.width * item.height * item.depth)

# 生成器代码
def generate_items(bin_size=(100, 100, 100)):
    items = []
    current_id = 0  # 使用一个计数器确保ID唯一，按顺序递增
    
    # 初始化物品列表，开始时只有一个物品 (100, 100, 100)
    initial_item = Item(bin_size[0], bin_size[1], bin_size[2], id=current_id)
    items.append(initial_item)
    current_id += 1  # 更新ID

    # 随机生成物品数目N
    N = random.randint(10, 50)

    # 生成物品直到数量达到N
    while len(items) < N:
        # 随机从现有物品中弹出一个物品
        item = random.choice(items)
        items.remove(item)  # 弹出并移除选中的物品
        axis = random.choice([0, 1, 2])  # 随机选择一个轴进行分割
        ratio = random.uniform(0.1, 0.9)  # 随机生成分割比例

        if axis == 0:  # 按 width 分割
            item1 = Item(item.width * ratio, item.height, item.depth, id=current_id)
            item2 = Item(item.width * (1 - ratio), item.height, item.depth, id=current_id + 1)
        elif axis == 1:  # 按 height 分割
            item1 = Item(item.width, item.height * ratio, item.depth, id=current_id)
            item2 = Item(item.width, item.height * (1 - ratio), item.depth, id=current_id + 1)
        else:  # 按 depth 分割
            item1 = Item(item.width, item.height, item.depth * ratio, id=current_id)
            item2 = Item(item.width, item.height, item.depth * (1 - ratio), id=current_id + 1)
        
        # 随机旋转新生成的物品
        item1.rotate()
        item2.rotate()
        
        # 添加新物品到列表，并更新ID
        items.append(item1)
        items.append(item2)
        current_id += 2  # 更新ID（每次生成两个新物品）

        # 调整集合中所有后续物品的 ID
        for i in range(len(items)):
            items[i].id = i  # 重新按顺序排列ID

    return items

# 示例使用
def main():
    # 生成物品集合
    items = generate_items(bin_size=(100, 100, 100))
    bin_dimensions = (100, 100, 100)
    
    # 创建神经引导算法实例
    neural_guided_bpp = NeuralGuidedBinPacking(bin_dimensions, items, simple_strategy_network)
    
    # 求解BPP问题
    solution, fitness = neural_guided_bpp.solve()

    # 打印最佳解和适应度分数
    print(f"Best solution sequence: {solution}")
    print(f"Fitness score: {fitness}")

    # 根据最佳解打包物品
    bin = Bin(*bin_dimensions)

    # 检查并打印解的物品
    for idx in solution:
        if 0 <= idx < len(items):  # 检查索引是否在有效范围内
            item = items[idx]
            if neural_guided_bpp.find_position(item, bin):
                print(f"Item {item.id} packed at position {item.position}")
            else:
                print(f"Item {item.id} could not be packed")
        else:
            print(f"Invalid index {idx} in solution.")



if __name__ == "__main__":
    main()
